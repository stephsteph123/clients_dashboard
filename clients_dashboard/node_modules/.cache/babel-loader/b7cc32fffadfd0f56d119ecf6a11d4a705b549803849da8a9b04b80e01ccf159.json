{"ast":null,"code":"var _jsxFileName = \"/Users/stephanierowe/clients_dashboard/clients_dashboard/src/components/Progress.jsx\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport useFetchTasks from \"../hooks/useFetchTasks\";\nimport \"../index.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Progress(_ref) {\n  _s();\n  let {\n    valueFromUpperCard\n  } = _ref;\n  const {\n    tasks,\n    error\n  } = useFetchTasks();\n  let closedVal = 0;\n  let openVal = 0;\n  tasks.map(task => {\n    if (valueFromUpperCard === task.project_name) {\n      if (task.completed_status === \"Open\") {\n        openVal = openVal + 1;\n      } else {\n        closedVal = closedVal + 1;\n      }\n    }\n    return null;\n  });\n  let total = closedVal + openVal;\n  let closedPercentage = closedVal / total * 100;\n  let openPercentage = Math.round(openVal / total * 100);\n  let strokeDash = `${openPercentage} 180`;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"col col-4 col-progress\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card all-progress-cards\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-header tasks-header\",\n        children: \"Progress\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-body progress-card-body\",\n        children: closedPercentage || openPercentage ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            class: \"container\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              class: \"row\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                class: \"col-md-6 offset-md-3\",\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  class: \"chart-container\",\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    class: \"donut-hole\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 85,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    class: \"donut-ring\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 86,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    class: \"donut-segment\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 87,\n                    columnNumber: 25\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 83,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 82,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 81,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 15\n          }, this)\n        }, void 0, false) : /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n}\n_s(Progress, \"eR40frzU9GqMI/u2DXEKw20BudY=\", false, function () {\n  return [useFetchTasks];\n});\n_c = Progress;\nexport default Progress;\nvar _c;\n$RefreshReg$(_c, \"Progress\");","map":{"version":3,"names":["React","useFetchTasks","jsxDEV","_jsxDEV","Fragment","_Fragment","Progress","_ref","_s","valueFromUpperCard","tasks","error","closedVal","openVal","map","task","project_name","completed_status","total","closedPercentage","openPercentage","Math","round","strokeDash","className","children","fileName","_jsxFileName","lineNumber","columnNumber","class","_c","$RefreshReg$"],"sources":["/Users/stephanierowe/clients_dashboard/clients_dashboard/src/components/Progress.jsx"],"sourcesContent":["import React from \"react\";\nimport useFetchTasks from \"../hooks/useFetchTasks\";\nimport \"../index.css\";\n\nfunction Progress({ valueFromUpperCard }) {\n  const { tasks, error } = useFetchTasks();\n  let closedVal = 0;\n  let openVal = 0;\n\n  tasks.map((task) => {\n    if (valueFromUpperCard === task.project_name) {\n      if (task.completed_status === \"Open\") {\n        openVal = openVal + 1;\n      } else {\n        closedVal = closedVal + 1;\n      }\n    }\n    return null;\n  });\n\n  let total = closedVal + openVal;\n  let closedPercentage = (closedVal / total) * 100;\n  let openPercentage = Math.round((openVal / total) * 100);\n  let strokeDash = `${openPercentage} 180`;\n\n  return (\n    <div className=\"col col-4 col-progress\">\n      <div className=\"card all-progress-cards\">\n        <div className=\"card-header tasks-header\">Progress</div>\n        <div className=\"card-body progress-card-body\">\n          {closedPercentage || openPercentage ? (\n            <>\n              {/* <div\n                class=\"donut-graph-section\"\n                aria-label=\"graphs of progress metrics\"\n              >\n                <svg\n                  width=\"100%\"\n                  height=\"100%\"\n                  viewBox=\"0 0 42 42\"\n                  class=\"donut\"\n                  aria-label=\"donut graph for progress\"\n                >\n                  <circle\n                    class=\"donut-hole\"\n                    cx=\"19\"\n                    cy=\"8\"\n                    r=\"9\"\n                    fill=\"#fff\"\n                  ></circle>\n                  <circle\n                    class=\"donut-ring\"\n                    cx=\"20\"\n                    cy=\"9\"\n                    r=\"8\"\n                    fill=\"transparent\"\n                    stroke=\"#d2d3d4\"\n                    stroke-width=\"2\"\n                  ></circle>\n                  <circle\n                    class=\"donut-segment\"\n                    cx=\"20\"\n                    cy=\"9\"\n                    r=\"8\"\n                    fill=\"transparent\"\n                    stroke=\"#8DC7CD\"\n                    stroke-width=\"2\"\n                    stroke-dasharray={strokeDash}\n                  ></circle>\n                  <g class=\"donut-graph-text-one\">\n                    <text x=\"49%\" y=\"23%\" class=\"chart-label1\">\n                      Closed: {closedVal}\n                    </text>\n                    <text x=\"49%\" y=\"25%\" class=\"chart-label2\">\n                      Open: {openVal}\n                    </text>\n                  </g>\n                </svg>\n              </div> */}\n              <div class=\"container\">\n                <div class=\"row\">\n                  <div class=\"col-md-6 offset-md-3\">\n                    <div class=\"chart-container\">\n                      {/* <div class=\"donut-chart\"> */}\n                        <div class=\"donut-hole\"></div>\n                        <div class=\"donut-ring\"></div>\n                        <div class=\"donut-segment\"></div>\n                      </div>\n                    </div>\n                  </div>\n              </div>\n            </>\n          ) : (\n            <div></div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Progress;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}