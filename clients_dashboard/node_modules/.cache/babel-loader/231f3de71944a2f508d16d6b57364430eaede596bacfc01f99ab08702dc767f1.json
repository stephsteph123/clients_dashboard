{"ast":null,"code":"var _jsxFileName = \"/Users/stephanierowe/clients_dashboard/clients_dashboard/src/components/Progress.jsx\",\n  _s2 = $RefreshSig$();\nimport React, { useEffect, useRef } from \"react\";\nimport useFetchTasks from \"../hooks/useFetchTasks\";\nimport Chart from \"chart.js/auto\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Progress(_ref) {\n  _s2();\n  let {\n    valueFromUpperCard\n  } = _ref;\n  const chartRef = useRef(null);\n  useEffect(() => {\n    var _s = $RefreshSig$();\n    const fetchData = async () => {\n      _s();\n      const {\n        tasks,\n        error\n      } = await useFetchTasks();\n      let closedVal = 0;\n      let openVal = 0;\n      tasks.forEach(task => {\n        if (valueFromUpperCard === task.project_name) {\n          if (task.completed_status === \"Open\") {\n            openVal = openVal + 1;\n          } else {\n            closedVal = closedVal + 1;\n          }\n        }\n      });\n      const total = closedVal + openVal;\n      const closedPercentage = closedVal / total * 100;\n      const openPercentage = openVal / total * 100;\n      const data = {\n        labels: [\"Closed\", \"Open\"],\n        datasets: [{\n          label: \"Tasks\",\n          data: [closedPercentage, openPercentage],\n          backgroundColor: [\"#36a2eb\", \"#ff6384\"]\n        }]\n      };\n      const config = {\n        type: \"doughnut\",\n        data: data,\n        options: {\n          responsive: true\n        }\n      };\n      const chartInstance = new Chart(chartRef.current, config);\n      return () => {\n        chartInstance.destroy();\n      };\n    };\n    _s(fetchData, \"m3NuKonwKxra3GeUnHIEi201zfA=\", false, function () {\n      return [useFetchTasks];\n    });\n    fetchData();\n  }, [valueFromUpperCard]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"col col-4 col-progress\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card all-progress-cards\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-header tasks-header\",\n        children: \"Progress\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-body progress-card-body\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: closedVal\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: openVal\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n}\n_s2(Progress, \"X+1SfQQ6xefXNU27aQW843M7cTw=\");\n_c = Progress;\nexport default Progress;\nvar _c;\n$RefreshReg$(_c, \"Progress\");","map":{"version":3,"names":["React","useEffect","useRef","useFetchTasks","Chart","jsxDEV","_jsxDEV","Progress","_ref","_s2","valueFromUpperCard","chartRef","_s","$RefreshSig$","fetchData","tasks","error","closedVal","openVal","forEach","task","project_name","completed_status","total","closedPercentage","openPercentage","data","labels","datasets","label","backgroundColor","config","type","options","responsive","chartInstance","current","destroy","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/stephanierowe/clients_dashboard/clients_dashboard/src/components/Progress.jsx"],"sourcesContent":["import React, { useEffect, useRef } from \"react\";\nimport useFetchTasks from \"../hooks/useFetchTasks\";\nimport Chart from \"chart.js/auto\";\n\nfunction Progress({ valueFromUpperCard }) {\n  const chartRef = useRef(null);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const { tasks, error } = await useFetchTasks();\n      let closedVal = 0;\n      let openVal = 0;\n\n      tasks.forEach((task) => {\n        if (valueFromUpperCard === task.project_name) {\n          if (task.completed_status === \"Open\") {\n            openVal = openVal + 1;\n          } else {\n            closedVal = closedVal + 1;\n          }\n        }\n      });\n\n      const total = closedVal + openVal;\n      const closedPercentage = (closedVal / total) * 100;\n      const openPercentage = (openVal / total) * 100;\n\n      const data = {\n        labels: [\"Closed\", \"Open\"],\n        datasets: [\n          {\n            label: \"Tasks\",\n            data: [closedPercentage, openPercentage],\n            backgroundColor: [\"#36a2eb\", \"#ff6384\"],\n          },\n        ],\n      };\n\n      const config = {\n        type: \"doughnut\",\n        data: data,\n        options: {\n          responsive: true,\n        },\n      };\n\n      const chartInstance = new Chart(chartRef.current, config);\n\n      return () => {\n        chartInstance.destroy();\n      };\n    };\n\n    fetchData();\n  }, [valueFromUpperCard]);\n\n  return (\n    <div className=\"col col-4 col-progress\">\n      <div className=\"card all-progress-cards\">\n        <div className=\"card-header tasks-header\">Progress</div>\n        <div className=\"card-body progress-card-body\"></div>\n        <div>{closedVal}</div>\n        <div>{openVal}</div>\n      </div>\n    </div>\n  );\n}\n\nexport default Progress;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}