{"ast":null,"code":"var _jsxFileName = \"/Users/stephanierowe/clients_dashboard/clients_dashboard/src/components/Progress.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from \"react\";\nimport useFetchTasks from \"../hooks/useFetchTasks\";\nimport \"../index.css\";\nimport { Doughnut } from 'react-chartjs-2';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Progress(_ref) {\n  _s();\n  let {\n    valueFromUpperCard\n  } = _ref;\n  const {\n    tasks,\n    error\n  } = useFetchTasks();\n  let closedVal = 0;\n  let openVal = 0;\n  tasks.map(task => {\n    if (valueFromUpperCard === task.project_name) {\n      if (task.completed_status === \"Open\") {\n        openVal = openVal + 1;\n      } else {\n        closedVal = closedVal + 1;\n      }\n    }\n    return null;\n  });\n  useEffect(() => {\n    // Data for the donut graph\n    const data = {\n      labels: ['Label 1', 'Label 2', 'Label 3'],\n      datasets: [{\n        data: [30, 40, 50],\n        backgroundColor: ['#FF6384', '#36A2EB', '#FFCE56'],\n        hoverBackgroundColor: ['#FF6384', '#36A2EB', '#FFCE56']\n      }]\n    };\n\n    // Options for the donut graph\n    const options = {\n      responsive: true,\n      maintainAspectRatio: false\n    };\n\n    // Log the data to verify it's correct\n    console.log('Data:', data);\n\n    // Cleanup function\n    return () => {\n      // Perform any cleanup if needed\n    };\n  }, []);\n  let total = closedVal + openVal;\n  let closedPercentage = closedVal / total * 100;\n  let openPercentage = Math.round(openVal / total * 51);\n  let strokeDash = `${openPercentage} 200`;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"col col-4 col-progress\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card all-progress-cards\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-header tasks-header\",\n        children: \"Progress\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-body progress-card-body\",\n        children: closedPercentage || openPercentage ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            class: \"donut-graph-section\",\n            \"aria-label\": \"graphs of progress metrics\",\n            children: /*#__PURE__*/_jsxDEV(\"svg\", {\n              width: \"100%\",\n              height: \"100%\",\n              viewBox: \"0 0 42 42\",\n              class: \"donut\",\n              \"aria-label\": \"donut graph for progress\",\n              children: [/*#__PURE__*/_jsxDEV(\"circle\", {\n                class: \"donut-hole\",\n                cx: \"19\",\n                cy: \"8\",\n                r: \"9\",\n                fill: \"#fff\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 71,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"circle\", {\n                class: \"donut-ring\",\n                cx: \"20\",\n                cy: \"9\",\n                r: \"8\",\n                fill: \"transparent\",\n                stroke: \"#d2d3d4\",\n                \"stroke-width\": \"2\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 78,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"circle\", {\n                class: \"donut-segment\",\n                cx: \"20\",\n                cy: \"9\",\n                r: \"8\",\n                fill: \"transparent\",\n                stroke: \"#8DC7CD\",\n                \"stroke-width\": \"2\",\n                \"stroke-dasharray\": strokeDash\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 87,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"g\", {\n                class: \"donut-graph-text-one\",\n                children: [/*#__PURE__*/_jsxDEV(\"text\", {\n                  x: \"49%\",\n                  y: \"23%\",\n                  class: \"chart-label1\",\n                  children: [\"Closed: \", closedVal]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 98,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n                  x: \"49%\",\n                  y: \"25%\",\n                  class: \"chart-label2\",\n                  children: [\"Open: \", openVal]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 101,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 97,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 15\n          }, this)\n        }, void 0, false) : /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n}\n_s(Progress, \"SvC4ZPaYHzHeiYyr5GawMRpeJ8c=\", false, function () {\n  return [useFetchTasks];\n});\n_c = Progress;\nexport default Progress;\nvar _c;\n$RefreshReg$(_c, \"Progress\");","map":{"version":3,"names":["React","useEffect","useFetchTasks","Doughnut","jsxDEV","_jsxDEV","Fragment","_Fragment","Progress","_ref","_s","valueFromUpperCard","tasks","error","closedVal","openVal","map","task","project_name","completed_status","data","labels","datasets","backgroundColor","hoverBackgroundColor","options","responsive","maintainAspectRatio","console","log","total","closedPercentage","openPercentage","Math","round","strokeDash","className","children","fileName","_jsxFileName","lineNumber","columnNumber","class","width","height","viewBox","cx","cy","r","fill","stroke","x","y","_c","$RefreshReg$"],"sources":["/Users/stephanierowe/clients_dashboard/clients_dashboard/src/components/Progress.jsx"],"sourcesContent":["import React, {useEffect} from \"react\";\nimport useFetchTasks from \"../hooks/useFetchTasks\";\nimport \"../index.css\";\nimport { Doughnut } from 'react-chartjs-2';\n\nfunction Progress({ valueFromUpperCard }) {\n  const { tasks, error } = useFetchTasks();\n  let closedVal = 0;\n  let openVal = 0;\n\n  tasks.map((task) => {\n    if (valueFromUpperCard === task.project_name) {\n      if (task.completed_status === \"Open\") {\n        openVal = openVal + 1;\n      } else {\n        closedVal = closedVal + 1;\n      }\n    }\n    return null;\n  });\n\n    useEffect(() => {\n      // Data for the donut graph\n      const data = {\n        labels: ['Label 1', 'Label 2', 'Label 3'],\n        datasets: [{\n          data: [30, 40, 50],\n          backgroundColor: ['#FF6384', '#36A2EB', '#FFCE56'],\n          hoverBackgroundColor: ['#FF6384', '#36A2EB', '#FFCE56']\n        }]\n      };\n  \n      // Options for the donut graph\n      const options = {\n        responsive: true,\n        maintainAspectRatio: false\n      };\n  \n      // Log the data to verify it's correct\n      console.log('Data:', data);\n  \n      // Cleanup function\n      return () => {\n        // Perform any cleanup if needed\n      };\n    }, []);\n\n  let total = closedVal + openVal;\n  let closedPercentage = (closedVal / total) * 100;\n  let openPercentage = Math.round((openVal / total) * 51);\n  let strokeDash = `${openPercentage} 200`;\n\n  return (\n    <div className=\"col col-4 col-progress\">\n      <div className=\"card all-progress-cards\">\n        <div className=\"card-header tasks-header\">Progress</div>\n        <div className=\"card-body progress-card-body\">\n          {closedPercentage || openPercentage ? (\n            <>\n              <div\n                class=\"donut-graph-section\"\n                aria-label=\"graphs of progress metrics\"\n              >\n                <svg\n                  width=\"100%\"\n                  height=\"100%\"\n                  viewBox=\"0 0 42 42\"\n                  class=\"donut\"\n                  aria-label=\"donut graph for progress\"\n                >\n                  <circle\n                    class=\"donut-hole\"\n                    cx=\"19\"\n                    cy=\"8\"\n                    r=\"9\"\n                    fill=\"#fff\"\n                  ></circle>\n                  <circle\n                    class=\"donut-ring\"\n                    cx=\"20\"\n                    cy=\"9\"\n                    r=\"8\"\n                    fill=\"transparent\"\n                    stroke=\"#d2d3d4\"\n                    stroke-width=\"2\"\n                  ></circle>\n                  <circle\n                    class=\"donut-segment\"\n                    cx=\"20\"\n                    cy=\"9\"\n                    r=\"8\"\n                    fill=\"transparent\"\n                    stroke=\"#8DC7CD\"\n                    stroke-width=\"2\"\n                    stroke-dasharray={strokeDash}\n                  ></circle>\n                  <g class=\"donut-graph-text-one\">\n                    <text x=\"49%\" y=\"23%\" class=\"chart-label1\">\n                      Closed: {closedVal}\n                    </text>\n                    <text x=\"49%\" y=\"25%\" class=\"chart-label2\">\n                      Open: {openVal}\n                    </text>\n                  </g>\n                </svg>\n              </div>\n            </>\n          ) : (\n            <div></div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Progress;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}